#!/usr/bin/env bash
###############################################################################
#
#  PACKAGE:  papamac's bash scripts and runtime environment (bash-scripts)
#     FILE:  p2pkg
#    TITLE:  papamac's personal package utility (p2pkg)
# FUNCTION:  Copy, download, install, and remove papamac's packages.
#    USAGE:  [sudo -E] p2pkg [[-option]..[-option]] package_name [argument]
#            See p2pkg -h for more precise usage.
#  OPTIONS:  See getopts comments in the script below.
#   AUTHOR:  papamac
#  VERSION:  1.0.9
#     DATE:  May 14, 2020
#
#
# MIT LICENSE:
#
# Copyright (c) 2019-2020 David A. Krause, aka papamac
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# DESCRIPTION:
#
# p2pkg optionally copies a package from a local library (p2pkg -c PACKAGE),
# downloads a package from an ftp server (p2pkg -f PACKAGE), or downloads a
# package from github (p2pkg -g PACKAGE).  It loads the package into the src
# sub-directory of the current working directory.  The package name is the only
# required positional argument and is used to access the package from the local
# library, the ftp server, or github.
#
# p2pkg optionally installs previously loaded package files (p2pkg -i PACKAGE),
# removes them (p2pkg -r PACKAGE), or executes a package-unique option (p2pkg
# -o PACKAGE).  The -i, -r, and -o options source action scripts named install,
# remove, and option which, if implemented, must reside in the package src
# directory.
#
# The -c, -f, and -g options are mutually exclusive.  The -i, -o, and -r
# options may be selected individually (e.g., p2pkg -i PACKAGE) or combined
# with -c, -f, or -g  (e.g., p2pkg -fio PACKAGE).  If -i, -o, and -r options
# are selected individually they will operate on an existing package that has
# already been loaded by p2pkg.  If a combination of options is specified, -r
# is executed first, then -c, -f, or , -g, and finally -i and -o.
#
# Note thet the package loading options (-c, -f, -g) overwrite an existing
# package in the current working directory, so that there is no need to remove
# a package before re-installing it.
#
# Arguments may be passed to the package-unique action scripts by selecting -I,
# -R, or -O followed by an argument instead of simply using -i, -r, or -o.
# These arguments are passed to the action scripts via the variables
# install_arg, remove_arg, and option_arg respectively.  Any positional
# arguments following the PACKAGE name are also available to the action
# scripts.  p2pkg sets two variables to capture these: arg is set to the first
# positional argument following the PACKAGE name ($1) and args is set to all
# of the positional arguments following the PACKAGE name ($*).
#
# p2pkg -f PACKAGE                      # Download the PACKAGE directory from
#                                         the ftp server into a sub-directory
#                                         named package in the src directory of
#                                         the current working directory.
# p2pkg -fi PACKAGE                     # Download the PACKAGE directory from
#                                         the ftp server and install it.
# p2pkg -r PACKAGE                      # Remove PACKAGE files and directories
#                                         from the current working directory.
# cd /usr/local                         # Download the PACKAGE directory from
# sudo p2pkg -gi PACKAGE                  github and install it in /usr/local.
#
# cd /usr/local                         # Remove PACKAGE files and directories
# sudo p2pkg -r PACKAGE                   from /usr/local.
#
#
# DEPENDENCIES/LIMITATIONS:
#
# Since the p2pkg script is part of the bash-scripts package, it must be
# bootstrapped by first installing it manually and then using the manually-
# installed version to install the bash-scripts package.  Also, for production
# use, p2pkg must be installed in a root-owned directory.  sudo will not
# execute p2pkg from a user directory even if the user directory is included in
# the execttion PATH.
#
###############################################################################

# Set xtrace option.

if [[ $XTRACE ]]; then
    set -x
fi

# Define local variables and functions.

script=${0##*/}                         # Script name.
usage="\
usage: p2pkg [-h] | [[[-c | -C cpy_lib] | [-f | -F ftp_dir] | [-g | -G git_usr]]
             [-i | -I install_arg] [-o | -O option_arg] [-r | -R remove_arg]
             package_name [argument...]]"

function errmsg { echo "$r$t$script: $1$n" >&2; }
function infomsg { echo "$g$t$script:$n $1"; }
function echo_exit { echo; exit $1; }

function ok_to_continue {
    echo -n "$g$t$script:$n $1... ok to continue? [Y/n] "
    read
    if [[ $REPLY != 'Y' ]]; then
        errmsg 'aborted'
        echo_exit 1
    fi
}

function chown_to_ref {                 # Change the owner:group of the targets
    declare -a lsd=($(ls -ld $1))       # ($2-$6) to that of the reference ($1)
    chown -R ${lsd[2]}:${lsd[3]} $2 $3 $4 $5 $6
}

function source_action_script {         # Conditionally source package-unique
    action=$1                           # action scripts.
    if [[ $action ]]; then
        if [[ -d $pkg ]]; then
            action_script=$pkg/$action
            if [[ -f $action_script ]]; then
                source $action_script
            else
                errmsg "$action_script: file not found"
                echo_exit 2
            fi
        else
            errmsg "$pkg: directory not found"
            echo_exit 3
        fi
    fi
}

# Parse options and set action variables.

while getopts 'cC:fF:gG:hiI:oO:rR:' opt; do
    case $opt in
        c) cpy=cpy ;;                   # Copy the package directory from a
#                                         local library to the src directory
#                                         of the current working directory.
        C) cpy=cpy                      # Same as c, but set cpy_lib.
           cpy_lib=$OPTARG ;;
        f) ftp=ftp ;;                   # Downowad the package directory from
#                                         the ftp server to the src directory
#                                         of the current working directory.
        F) ftp=ftp                      # Same as f, but set the ftp_dir.
           ftp_dir=$OPTARG ;;
        g) git=git ;;                   # Download the package directory from
#                                         the github server to the src
#                                         directory of the current working
#                                         directory.
        G) git=git                      # Same as g, but set the git_usr.
           git_usr=$OPTARG ;;
        h) echo "$usage"                # Help.
           exit 0 ;;
        i) install=install              # Execute the package install script.
           install_arg= ;;
        I) install=install              # Same as i, but include an argument.
           install_arg=$OPTARG ;;
        o) option=option                # Execute the package option script.
           option_arg= ;;
        O) option=option                # Same as o, but include an argument.
           option_arg=$OPTARG ;;
        r) remove=remove                # Execute the package remove script.
           remove_arg= ;;
        R) remove=remove                # Same as r, but include sn argument.
           remove_arg=$OPTARG ;;
        ?) echo "$usage"
           exit 4 ;;
    esac
done
shift $(($OPTIND - 1))
pkg_name=$1                             # Package name used by the ftp server
#                                         or the github server (may be upper
#                                         case).
shift 1                                 # Reset argument numbering for the
#                                         action scripts.
arg=$1
args=$*

if [[ ! $pkg_name ]]; then
    errmsg 'no package specified'
    echo_exit 5
fi
if [[ ! $cpy$ftp$git$install$option$remove ]]; then
    errmsg 'no options specified'
    echo_exit 6
fi

# Verify operation in the current working directory.

echo
ok_to_continue "working in $b$t$PWD$n"

# Define variables for use in this script and sourced action scripts.

pkg_name_lower=${pkg_name,,}            # pkg_name may be upper or mixed case.
bin=$PWD/bin                            # bin directory for executables.
src=$PWD/src                            # src directoryfor downloads.
pkg=$src/$pkg_name_lower                # Package directory in the src
#                                         directory.

# If remove was selected, do it first.

source_action_script $remove

# Optionally copy files from a local directory, download them from an ftp
# server, or download them from github.

if [[ $cpy ]]; then
    cpy_lib=${cpy_lib:-/Volumes/mac-pro-share/krause/papamac}
    cpy_path=$cpy_lib/$pkg_name
    if [[ ! -d $cpy_path ]]; then
        errmsg "cpy: $cpy_path: library not found"
        echo_exit 7
    fi
    infomsg "copying $b$t$cpy_path$n to $b$t$pkg$n"
    mkdir -p $pkg
    cp $cpy_path/* $pkg
    chown_to_ref $PWD $src

elif [[ $ftp ]]; then
    ftp_usr=${FTP_USR:-papamac}         # ftp account username.
    ftp_pwd=${FTP_PWD:-papa2352}        # ftp account password.
    ftp_url=${FTP_URL:-ftps://mac-pro.local:2121}  # ftp server URL.
    ftp_dir=${ftp_dir:-papamac}         # ftp package directory.
    ftp_path=$ftp_url/$ftp_dir/$pkg_name
    wget_opts='-qrR .DS_Store -nH --cut-dirs=2 --check-certificate=quiet'
    wget_opts="$wget_opts --user=$ftp_usr --password=$ftp_pwd"
    exclude_list="$ftp_dir/$pkg_name/.*"
    infomsg "downloading $b$t$ftp_path$n to $b$t$pkg$n"
    wget $wget_opts -X $exclude_list -P $pkg $ftp_path
    exit_status=$?
    if [[ $exit_status != 0 ]]; then
        errmsg "wget: $pkg_name: download error ($exit_status)"
        rm -fr $pkg
        echo_exit 8
    fi
    chown_to_ref $PWD $src

elif [[ $git ]]; then
    rm -fr $pkg
    git_usr=${git_usr:-papamac}         # github account username.
    git_url=${GIT_URL:-https://github.com}  # github server URL.
    git_path=$git_url/$git_usr/$pkg_name
    infomsg "downloading $b$t$git_path$n to $b$t$pkg$n"
    git clone $git_path $pkg
    exit_status=$?
    if [[ $exit_status != 0 ]]; then
        errmsg "git: $pkg_name: download error ($exit_status)"
        rm -fr $pkg
        echo_exit 9
    fi
    rm -fr $pkg/.[!.]*
    chown_to_ref $PWD $src
fi

# Optionally execute install and option action bash-scripts in the correct order.

source_action_script $install
source_action_script $option
echo_exit 0
