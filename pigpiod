#!/bin/bash

### BEGIN INIT INFO
# Provides:           pigpio server
# Required-Start:     $local_fs $syslog $network
# Required-Stop:      $local_fs $syslog $network
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  pigpio server
# Description:        pigpio server
### END INIT INFO

###############################################################################
#
#  PACKAGE:  papamac's bash scripts and runtime environment (bash-scripts)
#     FILE:  pigpiod
#    TITLE:  pigpio server daemon script (pigpiod)
# FUNCTION:  status, start, stop, or restart the pigpio server daemon.
#    USAGE:  pigpiod is installed using the option script.  It is executed
#            automatically by the system initialization daemon (init.d) and
#            from the command line (see usage examples below).
#   AUTHOR:  papamac
#  VERSION:  1.0.0
#     DATE:  April2, 2020
#
#
# MIT LICENSE:
#
# Copyright (c) 2020 David A. Krause, aka papamac
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# allcopies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# DESCRIPTION:
#
# pigpio is a library for the Raspberry Pi written by Ben Nuttall to control
# the Pi 's General Purpose Input Output (GPIO) capabilities.  It works on all
# versions of the Pi and is included in the standard Raspbian Buster
# distribution.  The pigpio library is implemented in a server utility that
# runs as a daemon (/usr/bin/pigpiod).  pigpiod services are accessed from
# multiple lanuuages using multiple libraries/modules implementing API's for
# those languages.
#
# This script (also named pigpiod) statuses, starts, stops, and restarts the
# pigpio server daemon using the standard start-stop-daemon command.  It is
# installed in /etc/init.d allowing the system initialization daemon to
# start/stop the pigpio server daemon at system startup/shutdown.  It can also
# be used from the command line as in the following examples:
#
# pigpiod status                        # Status the pigpio server daemon.
#
# sudo pigpiod start                    # Start the pigpio server daemon.
#
# sudo pigpiod stop                     # Stop the pigpio server daemon.
#
# sudo pigpiod restart                  # Stop the daemon, then restart it.
#
#
# DEPENDENCIES/LIMITATIONS:
#
# If executed from the command line, pigpiod must be executed using sudo
# (except status) because it starts/stops a root process.
#
###############################################################################

# Define daemon variables and functions.

n=$'\e[0m'                              # Reset all attributes (normal).
t=$'\e[1m'                              # Set character attribute to bright.
r=$'\e[31m'                             # Set foreground color to red.
g=$'\e[32m'                             # Set foreground color to green.
y=$'\e[33m'                             # Set foreground color to yellow.
b=$'\e[34m'                             # Set foreground color to blue.
daemon_file=$0                          # Full path name to daemon file.
daemon_name=${daemon_file##*/}          # Last segment of path name.
program_name=pigpiod                    # Executable program name.
pidfile=/var/run/pigpio.pid             # PID file.

function errmsg { echo "$n$r$t$daemon_name: $1$n" >&2; }
function infomsg { echo "$g$t$daemon_name:$n $1"; }

function status {
    echo
    infomsg "statusing daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    start-stop-daemon \
        --status \
        --pidfile $pidfile 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon is running ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon not running, but PID file exists ($exit_status)$n" ;;
        3) infomsg "     exit status:  $y${t}daemon not running ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown status ($exit_status)$n" ;;
    esac
}

function start {
    program_file=/usr/bin/$program_name  # Executable program path.
                                        #   usr/local segment may be edited
                                        #   by the option script.
    echo
    infomsg " starting daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    infomsg "    program file:  $b$t$program_file$n"
    start-stop-daemon \
        --start \
        --pidfile $pidfile \
        --startas $program_file 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon started ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon already running ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown error ($exit_status)$n" ;;
    esac
}

function stop {
    echo
    infomsg " stopping daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    start-stop-daemon \
        --stop \
        --retry 5 \
        --pidfile $pidfile \
        --remove-pidfile 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon stopped ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon already stopped ($exit_status)$n" ;;
        2) infomsg "     exit status:  $r${t}daemon not stopped after retry ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown error ($exit_status)$n" ;;
    esac
}

# Go do it ...

cmd=$1
case $cmd in
    status)  status ;;
    start)   start ;;
    stop)    stop ;;
    restart) stop; start ;;
    *)       errmsg "unrecognized command ($cmd)"
             echo "usage: $daemon_name {status|start|stop|restart}"
             exit_status=10 ;;
esac

exit $exit_status
